    我们在基本任务的基础之上额外完成了注册登录，数独难度判定，用户水平检测并动态提供相匹配难度的数独题目等一系列功能。
    我们在主界面之中提供了额外的注册登录界面（见register.html），在这里面用户可以填写个人信息并且将其保存，当然我们现在用不到这么多的信息，我们只会保存用户名。在服务器的session之中，我们保存了每一个注册用户的等级，当前提供服务的用户及其等级。
    而我们在每个数度开始之后将一直保持计时器每秒更新，直到用户完成了数独。此时，我们将根据用户完成所需的时间对等级进行评估：如果在一分钟之内完成数独，则用户等级+1，数独难度减一，而如果在3分钟之外这才完成，我们将认为这是一个较难的数独题目或者用户水平较低，因此我们让用户等级减一而数独难度加一。难度与等级的变化范围均是0-10。这些变化均会保存在session之中以便之后的调用。（见sudoku.py success()函数）
    当然对于数独题目的编号很有意义，可以以此标记难度提供推荐，不过我的实现是直接将数独以一个字符串的形式当做其本身的索引，也能起到相同的作用与效果。
    作为这些信息的作用，我们会在每一次为用户重新提供对局的时候使用，我们会首先将所有题目按照难度进行排序，随着用户等级的不断提高，我们会为他划分越来越小的题目范围（难题更多），然后在这个范围之内随机选择题目，这样用户在不断完成数独的情况下便会更多挑战高难度题目。以此获得更好的游戏体验。（见sudoku.py sudokuMain()函数）
    此外，我们的游戏之中也有不少小创意，比如添加了背景图片和网页角标；点击屏幕会依次弹出“sudoku”“makes”“me”“happy”"[爱心]"；亦或者在数独进行之中可以选择重置题目，或者太过简单而直接跳过的功能（见sudukuMain.html）等等，使得整个布局更为有趣。
